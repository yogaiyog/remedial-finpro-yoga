generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  fullName     String
  emailVerified Boolean   @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  clients      Client[]   
  invoices     Invoice[]  
  product      Product[]  
}

model Client {
  id            String     @id @default(uuid())
  userId        String
  name          String
  address       String
  contactInfo   String
  paymentTerms  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices      Invoice[]  
}

model Invoice {
  id                String        @id @default(uuid())
  userId            String
  clientId          String
  dueDate           DateTime
  status            InvoiceStatus @default(PENDING)
  recurringSchedule RecurringType?
  recurringEndDate  DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  client            Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceItems      InvoiceItem[] 
}

model InvoiceItem {
  id        String   @id @default(uuid())
  invoiceId String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction)
}

model Product {
  id            String     @id @default(uuid())
  userId        String
  name          String
  description   String
  price         Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceItems  InvoiceItem[]
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum RecurringType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}


